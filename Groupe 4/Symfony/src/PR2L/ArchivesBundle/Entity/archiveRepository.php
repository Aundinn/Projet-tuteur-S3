<?php

namespace PR2L\ArchivesBundle\Entity;

use Doctrine\ORM\EntityRepository;
use PR2L\ArchivesBundle\Entity\archive;

/**
 * archiveRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class archiveRepository extends EntityRepository
{
    public function myFindAll(){
        return $this->createQueryBuilder('a')->getQuery()->getResult();
    }
    
    public function myFindValide(){
        $qb = $this->createQueryBuilder('a');
        
        $qb->where('a.valide = 1');
        
        return $qb
                ->getQuery()
                ->getResult();
    }
    
    public function myFindNonValide(){
        $qb = $this->createQueryBuilder('a');
        
        $qb->where('a.valide = 0');
        
        return $qb
                ->getQuery()
                ->getResult();
    }
    
    public function myFindById($id){
        $qb = $this->createQueryBuilder('a');
        
        $qb->where('a.id = :identifiant')
           ->setParameter('identifiant', $id);
        
        return $qb
                ->getQuery()
                ->getResult();
    }
    
    public function valider($id){
        $query = $this->getEntityManager()
        ->createQuery('
            UPDATE PR2L\ArchivesBundle\Entity\archive a
            SET a.valide = 1
            WHERE a.id = :identifiant'
        )->setParameter('identifiant', $id);

        $result = $query->getSingleResult();

    }
    
    public function myFindArchive($auteur,$departement,$fond){
        $qb = $this->createQueryBuilder('a');    

        $result = $qb
                ->getQuery()
                ->getResult();
        
        $cpt = 0;
        foreach ($result as $valeur){
            if($fond != null){
                if($valeur->getNomDuFond() != $fond){
                       unset($result[$cpt]);
                }
            }
            if($departement != null){
                if($valeur->getDepartementDuFond() != $departement){
                       unset($result[$cpt]);
                }
            }
            if($auteur != null){
                if($valeur->getProducteurArchive() != $auteur){
                       unset($result[$cpt]);
                }
            }
            if($valeur->getValide() == 0){
                unset($result[$cpt]);
            }
            $cpt++;
        }
        
        return $result;
    }
}
